#pragma once

// File auto-generated by StartNewDay

#include <Export.hpp>
#include <Utilities.ipp>

#include <algorithm>
#include <cmath>

namespace util
{
  namespace day15
  {
    std::vector<size_t> GetStartingNumbers(const std::vector<std::string>& x)
    {
      std::vector<size_t> startingNumbers;

      const auto& first = x.front();
      const auto tokens = util::Split(first, ',');

      std::transform(tokens.begin(), tokens.end(), std::back_inserter(startingNumbers),
                     [](const std::string& x) { return util::StringTo<size_t>(x).value(); });

      return startingNumbers;
    }

    std::optional<size_t> GetLastTimeSpoken(const std::vector<size_t>& x, size_t num)
    {
      std::optional<size_t> lastTime;

      const auto it = std::find(x.rbegin(), x.rend(), num);
      if(it != x.rend())
      {
        lastTime = x.size() - std::distance(x.rbegin(), it);
      }

      return lastTime;
    }

    size_t Get2020(std::vector<size_t> x)
    {
      size_t count = 0;
      size_t iterations = 2020 - x.size();
      while(count++ < iterations)
      {
        const auto currentNum = x.back();
        const auto lastTimeOpt = GetLastTimeSpoken({x.begin(), x.end() - 1}, currentNum);
        if(lastTimeOpt.has_value())
        {
          x.push_back(x.size() - lastTimeOpt.value());
        }
        else
        {
          x.push_back(0);
        }
      }

      return x.back();
    }
  } // namespace day15
} // namespace util
