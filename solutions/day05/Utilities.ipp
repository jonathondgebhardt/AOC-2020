#pragma once

// File auto-generated by StartNewDay

#include <Export.hpp>
#include <Utilities.ipp>

#include <algorithm>
#include <cassert>

namespace util
{
  namespace day05
  {
    size_t BinarySpacePartition(const std::string& x, int ub, char front)
    {
      auto lb = 0;
      auto range = ub + 1;

      for(const auto letter : x)
      {
        range /= 2;
        letter == front ? ub -= range : lb += range;
      }

      assert(ub == lb);

      return ub;
    }

    size_t UTILITIES_EXPORT GetRowNumber(const std::string& x)
    {
      return BinarySpacePartition(x, 127, 'F');
    }

    size_t UTILITIES_EXPORT GetSeatNumber(const std::string& x)
    {
      return BinarySpacePartition(x, 7, 'L');
    }

    size_t UTILITIES_EXPORT GetSeatID(size_t rowNumber, size_t seatNumber)
    {
      return rowNumber * 8 + seatNumber;
    }

    std::vector<size_t> UTILITIES_EXPORT GetSeatIDs(const std::vector<std::string>& x)
    {
      std::vector<size_t> seatIDs;
      std::transform(x.begin(), x.end(), std::back_inserter(seatIDs), [](const std::string& line) {
        const auto rowNumber = GetRowNumber(line.substr(0, line.size() - 3));
        const auto seatNumber = GetSeatNumber(line.substr(line.size() - 3));
        return GetSeatID(rowNumber, seatNumber);
      });

      return seatIDs;
    }
  } // namespace day05
} // namespace util
