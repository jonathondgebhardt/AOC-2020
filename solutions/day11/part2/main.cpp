#include <day11/Utilities.ipp>

#include <iterator>

// File auto-generated by StartNewDay

struct DirectionalOccupiedSeatAdapter : public util::day11::OccupiedSeatAdapter
{
  bool getShouldSit(int row, int col) const override
  {
    // If a seat is empty (L) and there are no occupied seats adjacent to it, the seat becomes
    // occupied.
    return !this->getIsSeatOccupied(row, col) && this->getOccupiedSeats(row, col) == 0;
  }

  bool getShouldStand(int row, int col) const override
  {
    // If a seat is occupied (#) and four or more seats adjacent to it are also occupied, the
    // seat becomes empty.
    return this->getIsSeatOccupied(row, col) && this->getOccupiedSeats(row, col) >= 5;
  }

  std::optional<bool> checkUp(int row, int col) const override
  {
    while(--row >= 0)
    {
      const auto seatOpt = this->getIsSeat(row, col);
      if(seatOpt.has_value() && seatOpt.value())
      {
        return this->getIsSeatOccupied(row, col);
      }
    }

    return std::nullopt;
  }

  std::optional<bool> checkUpDiagonalLeft(int row, int col) const override
  {
    while(--row >= 0 && --col >= 0)
    {
      const auto seatOpt = this->getIsSeat(row, col);
      if(seatOpt.has_value() && seatOpt.value())
      {
        return this->getIsSeatOccupied(row, col);
      }
    }

    return std::nullopt;
  }

  std::optional<bool> checkUpDiagonalRight(int row, int col) const override
  {
    while(--row >= 0 && ++col < this->seats[row].size())
    {
      const auto seatOpt = this->getIsSeat(row, col);
      if(seatOpt.has_value() && seatOpt.value())
      {
        return this->getIsSeatOccupied(row, col);
      }
    }

    return std::nullopt;
  }

  std::optional<bool> checkLeft(int row, int col) const override
  {
    while(--col >= 0)
    {
      const auto seatOpt = this->getIsSeat(row, col);
      if(seatOpt.has_value() && seatOpt.value())
      {
        return this->getIsSeatOccupied(row, col);
      }
    }

    return std::nullopt;
  }

  std::optional<bool> checkRight(int row, int col) const override
  {
    while(++col < this->seats[row].size())
    {
      const auto seatOpt = this->getIsSeat(row, col);
      if(seatOpt.has_value() && seatOpt.value())
      {
        return this->getIsSeatOccupied(row, col);
      }
    }

    return std::nullopt;
  }

  std::optional<bool> checkDown(int row, int col) const override
  {
    while(++row < this->seats.size())
    {
      const auto seatOpt = this->getIsSeat(row, col);
      if(seatOpt.has_value() && seatOpt.value())
      {
        return this->getIsSeatOccupied(row, col);
      }
    }

    return std::nullopt;
  }

  std::optional<bool> checkDownDiagonalLeft(int row, int col) const override
  {
    while(++row < this->seats.size() && --col >= 0)
    {
      const auto seatOpt = this->getIsSeat(row, col);
      if(seatOpt.has_value() && seatOpt.value())
      {
        return this->getIsSeatOccupied(row, col);
      }
    }

    return std::nullopt;
  }

  std::optional<bool> checkDownDiagonalRight(int row, int col) const override
  {
    while(++row < this->seats.size() && ++col < this->seats[row].size())
    {
      const auto seatOpt = this->getIsSeat(row, col);
      if(seatOpt.has_value() && seatOpt.value())
      {
        return this->getIsSeatOccupied(row, col);
      }
    }

    return std::nullopt;
  }
};

int main(int argc, char* argv[])
{
  const auto fileName = util::GetInputFile("day11.txt");
  const auto contents = util::Parse(fileName);

  util::day11::WaitingArea wa(contents);

  do
  {
    wa.startNewRound<DirectionalOccupiedSeatAdapter>(DirectionalOccupiedSeatAdapter());

  } while(wa.getSeatsChanged());

  std::cout << wa.getOccupiedSeats() << "\n";

  return EXIT_SUCCESS;
}
