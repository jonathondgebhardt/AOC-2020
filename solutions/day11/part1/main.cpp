#include <day11/Utilities.ipp>

#include <iterator>

// File auto-generated by StartNewDay

struct AdjacentOccupiedSeatAdapter : public util::day11::OccupiedSeatAdapter
{
  std::optional<bool> checkUp(int row, int col) const override
  {
    if(row - 1 >= 0)
    {
      return this->getIsSeatOccupied(row - 1, col);
    }

    return std::nullopt;
  }

  std::optional<bool> checkUpDiagonalLeft(int row, int col) const override
  {
    if(row - 1 >= 0 && col - 1 >= 0)
    {
      return this->getIsSeatOccupied(row - 1, col - 1);
    }

    return std::nullopt;
  }

  std::optional<bool> checkUpDiagonalRight(int row, int col) const override
  {
    if(row - 1 >= 0 && col + 1 < this->seats[row - 1].size())
    {
      return this->getIsSeatOccupied(row - 1, col + 1);
    }

    return std::nullopt;
  }

  std::optional<bool> checkLeft(int row, int col) const override
  {
    if(row >= 0 && col - 1 >= 0)
    {
      return this->getIsSeatOccupied(row, col - 1);
    }

    return std::nullopt;
  }

  std::optional<bool> checkRight(int row, int col) const override
  {
    if(row >= 0 && col + 1 < this->seats[row].size())
    {
      return this->getIsSeatOccupied(row, col + 1);
    }

    return std::nullopt;
  }

  std::optional<bool> checkDown(int row, int col) const override
  {
    if(row + 1 < this->seats.size())
    {
      return this->getIsSeatOccupied(row + 1, col);
    }

    return std::nullopt;
  }

  std::optional<bool> checkDownDiagonalLeft(int row, int col) const override
  {
    if(row + 1 < this->seats.size() && col - 1 >= 0)
    {
      return this->getIsSeatOccupied(row + 1, col - 1);
    }

    return std::nullopt;
  }

  std::optional<bool> checkDownDiagonalRight(int row, int col) const override
  {
    if(row + 1 < this->seats.size() && col + 1 < this->seats[row + 1].size())
    {
      return this->getIsSeatOccupied(row + 1, col + 1);
    }

    return std::nullopt;
  }
};

int main(int argc, char* argv[])
{
  const auto fileName = util::GetInputFile("day11.txt");
  const auto contents = util::Parse(fileName);

  util::day11::WaitingArea wa(contents);

  do
  {
    wa.startNewRound<AdjacentOccupiedSeatAdapter>(AdjacentOccupiedSeatAdapter());
  } while(wa.getSeatsChanged());

  std::cout << wa.getOccupiedSeats() << "\n";

  return EXIT_SUCCESS;
}
