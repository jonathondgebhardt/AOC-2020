#pragma once

// File auto-generated by StartNewDay

#include <Export.hpp>
#include <Utilities.ipp>

#include <algorithm>
#include <iostream>
#include <string>
#include <unordered_map>

namespace util
{
  namespace day04
  {
    struct UTILITIES_EXPORT Credential
    {
      explicit Credential(const std::vector<std::string>& x)
      {
        for(const auto& item : x)
        {
          const auto tokens = util::Split(item);
          for(const auto& token : tokens)
          {
            const auto pair = this->getKeyValuePair(token);
            this->credentials[pair.first] = pair.second;
          }
        }
      }

      std::pair<std::string, std::string> getKeyValuePair(const std::string& x) const
      {
        const auto delimiter = x.find(":");
        return std::make_pair(x.substr(0, delimiter), x.substr(delimiter + 1));
      }

      bool isValid() const
      {
        // Keys:
        // byr (Birth Year)
        // iyr (Issue Year)
        // eyr (Expiration Year)
        // hgt (Height)
        // hcl (Hair Color)
        // ecl (Eye Color)
        // pid (Passport ID)
        // cid (Country ID)

        // According to the prompt, CID can be ignored.
        std::vector<std::string> requiredKeys = {"byr", "iyr", "eyr", "hgt", "hcl", "ecl", "pid"};
        return std::any_of(requiredKeys.begin(), requiredKeys.end(), [this](const std::string& x) {
          return this->credentials.find(x) == this->credentials.end();
        });
      }

      std::unordered_map<std::string, std::string> credentials;
    };
  } // namespace day04
} // namespace util
